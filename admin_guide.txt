Приложение 2. Руководство администратора корпоративной информационной системы

1. Введение

Данное руководство предназначено для администраторов системы "Structo" - генератора трёхмерных объектов на основе методов машинного обучения. Документ содержит информацию о настройке, управлении и обслуживании системы.

Система "Structo" представляет собой веб-платформу для преобразования текстовых описаний в трёхмерные модели с использованием технологий искусственного интеллекта и машинного обучения.

Администратор системы отвечает за:
• Установку и настройку программного обеспечения
• Управление пользователями и их правами
• Мониторинг работы системы
• Обеспечение безопасности данных
• Резервное копирование и восстановление
• Обновление компонентов системы

2. Назначение и условия применения

2.1. Назначение системы

Система "Structo" предназначена для:
• Автоматической генерации 3D-моделей на основе текстовых описаний
• Предоставления пользователям инструментов для работы с 3D-моделями
• Хранения и управления созданными моделями
• Экспорта моделей в различных форматах (OBJ, STL, FBX)

2.2. Условия, необходимые для функционирования системы

Серверные требования:
• Процессор: не менее 8 ядер, рекомендуется 16+ ядер
• Оперативная память: минимум 32 ГБ, рекомендуется 64+ ГБ
• Дисковое пространство: минимум 500 ГБ SSD
• Графический ускоритель: NVIDIA GPU с поддержкой CUDA, минимум 16 ГБ VRAM
• Операционная система: Linux (Ubuntu 20.04 LTS или новее)
• Сетевое подключение: высокоскоростное, с пропускной способностью не менее 1 Гбит/с

Программные зависимости:
• Node.js (версия 16.x или новее)
• Python 3.8+
• Docker и Docker Compose
• СУБД PostgreSQL 13+
• Redis для кэширования
• Nginx в качестве веб-сервера и балансировщика нагрузки

3. Подготовка к работе

3.1. Установка системы

1. Клонирование репозитория:
```bash
git clone https://github.com/pyanprojects/structo.git
cd structo
```

2. Настройка переменных окружения:
```bash
cp .env.example .env
```
Отредактируйте файл .env, указав необходимые параметры:
• DATABASE_URL - строка подключения к базе данных
• REDIS_URL - строка подключения к Redis
• API_SECRET_KEY - секретный ключ для API
• MODEL_ENDPOINT - адрес сервиса ML-моделей
• STORAGE_PATH - путь для хранения моделей

3. Запуск системы через Docker:
```bash
docker-compose up -d
```

3.2. Проверка работоспособности

После установки необходимо проверить:
1. Доступность веб-интерфейса по адресу https://[домен]/admin
2. Подключение к базе данных
3. Работоспособность API по адресу https://[домен]/api/health
4. Корректную работу сервиса генерации моделей

3.3. Первоначальная настройка

1. Создание учетной записи администратора:
```bash
docker-compose exec backend npm run create-admin
```

2. Настройка SSL-сертификатов:
```bash
docker-compose exec nginx certbot --nginx -d [домен]
```

3. Настройка резервного копирования:
```bash
docker-compose exec backend npm run setup-backups
```

4. Описание операций

4.1. Управление пользователями

В административной панели доступны следующие операции:
• Просмотр списка пользователей
• Создание новых пользователей
• Блокировка/разблокировка учетных записей
• Изменение ролей и прав доступа
• Сброс паролей пользователей

Для создания нового пользователя:
1. Перейдите в раздел "Пользователи" → "Добавить пользователя"
2. Заполните обязательные поля (имя, email, пароль)
3. Выберите роль (пользователь, модератор, администратор)
4. Нажмите "Сохранить"

4.2. Мониторинг системы

Система мониторинга включает:
• Журналы событий (логи) - доступны в разделе "Мониторинг" → "Логи"
• Статистика использования - "Мониторинг" → "Статистика"
• Мониторинг производительности - "Мониторинг" → "Производительность"

Основные метрики для отслеживания:
• Количество запросов на генерацию моделей
• Время обработки запросов
• Использование ресурсов сервера (CPU, RAM, GPU)
• Количество ошибок и сбоев

4.3. Управление моделями и контентом

Администратор может:
• Просматривать все созданные модели
• Удалять модели, нарушающие правила
• Настраивать ограничения на генерацию (количество запросов в день)
• Управлять категориями и тегами моделей

4.4. Настройка API и интеграций

Для настройки внешних интеграций:
1. Перейдите в раздел "Настройки" → "API и интеграции"
2. Настройте параметры подключения к внешним сервисам
3. Создайте и управляйте API-ключами для сторонних приложений

4.5. Резервное копирование и восстановление

Система поддерживает:
• Автоматическое ежедневное резервное копирование базы данных
• Резервное копирование файлов моделей
• Восстановление из резервных копий

Для создания ручной резервной копии:
```bash
docker-compose exec backend npm run backup
```

Для восстановления из резервной копии:
```bash
docker-compose exec backend npm run restore --file=backup_20240601.tar.gz
```

5. Аварийные ситуации

5.1. Типовые ошибки и способы их устранения

| Ошибка | Возможная причина | Решение |
|--------|-------------------|---------|
| Недоступность веб-интерфейса | Проблемы с Nginx | Проверить логи и перезапустить: `docker-compose restart nginx` |
| Ошибки генерации моделей | Проблемы с ML-сервисом | Проверить логи и перезапустить: `docker-compose restart ml-service` |
| Ошибки базы данных | Проблемы с PostgreSQL | Проверить логи и состояние: `docker-compose exec db pg_isready` |
| Высокая нагрузка на сервер | Большое количество запросов | Увеличить количество воркеров или масштабировать систему |

5.2. Восстановление после сбоев

При критических сбоях:
1. Проверьте логи всех компонентов: `docker-compose logs`
2. Перезапустите проблемные сервисы: `docker-compose restart [service]`
3. При необходимости восстановите систему из резервной копии
4. Если проблема сохраняется, обратитесь в службу поддержки

5.3. Контакты технической поддержки

При возникновении проблем, которые невозможно решить самостоятельно:
• Email: support@structo.ai
• Телефон: +7 (XXX) XXX-XX-XX
• Система тикетов: https://support.structo.ai

6. Рекомендации по освоению

6.1. Обучающие материалы

Для эффективного администрирования системы рекомендуется:
• Изучить документацию в разделе "Справка" административной панели
• Пройти онлайн-курс по администрированию системы: https://learn.structo.ai/admin
• Ознакомиться с видеоуроками в разделе "Обучение"

6.2. Регламент обслуживания

Рекомендуемый график обслуживания:
• Ежедневно: проверка логов и мониторинг производительности
• Еженедельно: проверка резервных копий, очистка временных файлов
• Ежемесячно: обновление компонентов системы, анализ статистики использования
• Ежеквартально: полное тестирование системы, оптимизация производительности

6.3. Оптимизация производительности

Для обеспечения оптимальной производительности:
• Регулярно очищайте кэш: `docker-compose exec redis redis-cli FLUSHALL`
• Оптимизируйте базу данных: `docker-compose exec db vacuumdb -a -f -z`
• Мониторите использование дискового пространства
• При необходимости масштабируйте систему, добавляя дополнительные узлы 