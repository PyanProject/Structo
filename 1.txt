ВВЕДЕНИЕ
В настоящее время ИИ всё больше и больше проникает в повседневную жизнь как простых людей, так и различных специалистов. Огромное количество ИИ-инструментария позволяет решать самые разные задачи – от классификации, до генерации. С развитием искусственного интеллекта появляется всё больше моделей, которые выполняют работу в считанные мгоновения, когда люди тратят на то же самое дни, а то и недели. Да, на данный момент не все модели способны идеально выполнять свои задачи, однако такая практика всё же позволяет ускорять и оптимизировать процессы их выполнения, что значительно упрощает любую работу. Что касается обычных людей – ИИ всё больше проникает в их жизни помогая решать самые обычные повседневные дела. “Structo” – один из таких сервисов, который призван помочь многим профессиям и обычным людям, которые столкнулись с проблемой моделирования 3D объектов, ведь он призван преобразовывать текстовый промпт в полноценные 3D объекты.
Актуальность работы обусловлена острой необходимостью в узконаправленных специалистах и особых навыков, связанных с 3D моделированием. Например, для инди-разработчика(ов) игр, у которого(ых) попросту нет ни средств на найм 3D дизайнеров, ни времени или желания на изучение сложных программ, наш инструмент станет “глотком свежего воздуха”, ведь одним вводом промпта они смогут получить любую желаемую модель для своего проекта. Архитекторы при моделировании местности смогут быстро создать любой небольшой объект для заполнения проектов городов. Помимо специалистов, генерировать модели сможет каждый для своих персональных целей без каких-либо временных затрат и проблем, что даёт большую почву для самых разных идей, где могут пригодиться 3D объекты. Также актуальность работы обусловлена тем, что на территории нашей страны сервисов такого формата нет.
Объектом исследования моей выпускной квалификационной работы стал “GameDev Track” от МУИВ, наша команда “Pyan Projects”, различные open-source модели для генерации 3D объектов, множество моделей нейронных сетей, начиная от классификации текста, заканчивая моделями, позволяющими создавать каркасы для трёхмерных объектов, сервисы-конкуренты, такие как “Luma AI”, “Meshy – Free 3D AI Model” и др.
Предметом исследования выпускной квалификационной работы является возможность создания сервиса для генерации трёхмерных объектов из текстовых описаний при помощи связанных между собой моделей нейронных сетей, а также оценка эффективности подобного сервиса.
Цель выпускной квалификационной работы состоит в реализации полноценного сервиса для генерации 3D объектов по текстовым описаниям, запуск MVP, а также глубокое исследование темы генерации трёхмерных представлений при помощи нейронных сетей.
Основные задачи, необходимые для достижения цели:
1.	Провести анализ предметной области для выявления бизнес-процессов, связанных с запуском проекта такого формата.
2.	Исследование и проектирование, а именно:
•	Определение требований (формат входных текстов, ограниченные описания, ключевые слова)
•	Анализ технологий (Подбор архитектуры, исследование существующих моделей, выбор языковых моделей)
•	Оценка требуемых и имеющихся системных требований (какие ресурсы необходимы для создания полноценной модели с нуля)
•	Дизайн системы и работа с пользователем (Разработка архитектуры сервиса, определение хранилища данных для взаимодействия с пользователем)
3.	Разработка основных компонентов, а именно:
•	Обработка текстового описания (использование NLP-модели для выделения ключевых параметров объекта, векторизация)
•	Генерация 3D модели (разработка алгоритма конвертации эмбеддингов в 3D модель)
•	Интеграция существующих моделей для генерации (NeRF, Gauss Splatting)
•	Визуализация и рендеринг (выбор движка для рендеринга, автоматизация)
4.	Инфраструктура и развертывание, а именно:
•	Серверная часть (API для взаимодействия с пользователем)
•	Клиентская часть (Веб-интерфейс, поддержка просмотра и загрузки готовой модели)
•	Развертывание (хостинг, настройка БД)
5.	Тестирование и отладка, а именно:
•	Проверка качества генерации
•	Оптимизация скорости работы (по мере возможности)
•	Исправление багов
6.	Маркетинг и запуск, а именно:
•	Тестирование на пользователях MVP
•	Обратная связь и доработка
•	Масштабирование и продвижение
Моя бакалаврская работа состоит из:
•	Введения
•	Первой главы – теоретическая часть
•	Второй главы – практическая часть (модель)
•	Третьей главы – практическая часть (сайт)
•	Четвёртой главы – экономическая часть
•	Пятой главы – рекламная часть
•	Заключения – выводы
•	Списка литературы
Первая глава, посвящена описанию теоретической части по ИИ, описанию архитектур различных моделей, оценкам моделей, описанию моделей-сегментов для итоговой модели. Выявлены требуемые системные требования для создания проекта, достоинства и недостатки генерации моделей, а также сформированны требования к “Structo”.
Вторая глава, посвящена процессу разработки проекта
В третьей главе, описана экономическая часть проекта. Дана оценка себестоимости и целесообразности разработки данного продукта.
В четвёртой главе, описаны маркетинговые мероприятия и стратегии продвижения продукта.
Ссылка на git-репозиторий с открытым исходным кодом: PyanProject/Structo: Website for generating 3D objects using machine learning methods
Ссылка на хостинг: Structo | Генерация 3D-моделей
Учётные данные пользователя 1:
Логин: example1(free-тариф)
 	Пароль: 0000
Учётные данные пользователя 2:
Логин: example2 (pro-тариф)
 	Пароль: 0000
Учётные данные пользователя 3:
Логин: example3 (business-тариф)
 	Пароль: 0000
 
АНАЛИТИЧЕСКАЯ ЧАСТЬ
1	АНАЛИЗ ПРЕДМЕТНОЙ ОБЛАСТИ
1.1	Анализ подразделения GameDev Track организации MUIV 
1.1.1	Анализ «GameDev Track» университета
Я студент 4-го курса Частного образовательного учреждения высшего образования “Московского университета имени С.Ю. Витте”, учусь на факультете “Информационные технологии”. За время обучения я стал участником курса по разработке игр “GameDev Track” под руководством М.В.Преображенского. Данный курс рассмотривает разные аспекты разработки игр начиная от lvl-дизайна, заканчивая backend частью. Структура данного “трэка” состоит из следующих частей:
1.	М.В.Преображенский – руководитель и представитель “GameDev Track”. Обучает созданию игр и поддерживает разработки проектов.
2.	Команды – группы людей, которые работают над одним проектом. Обычно имеют свою иерархию внутри, благодаря чему разработка проекта оптимизирована.
3.	Соло-разработчики – люди, которые самолично занимаются разработкой проектов.
Так как в разработке игр главным стержнем являются программисты, всё участники “трэка” – это студенты факультета “Информационных технологий”, следовательно, людей, которые владели специальными программами для 3D-скульптинга нет. Это значительно усложняет процесс разработки 3D-проектов, ведь помимо backend части для полноценно-законченой работы требуется lvl-дизайн, дизайны персонажей и т.д. Всё это требует навыков работы с 3D, но данной информации на курсе не содержится ввиду отсутствия человека, способного обучить этому.
Разрабатывая наш предпоследний проект “Survansion”, мы сильно уперлись в дизайн, но нашим спасением стал зарубежный сервис Luma AI, благодаря которому мы закрыли вопрос с дизайном. Это вдохновило нас создать наш отечественный сервис, который помог бы нашим коллегам и многим людям в данной проблеме. В рамках нашей команды “Pyan Projects” мы реализуем этот проект.
1.2	Подготовка мэш-объектов
1.2.1	Моделирование объектов “КАК ЕСТЬ”
Моделирование 3D-объектов “КАК ЕСТЬ” представляет собой целый набор действий, который занимает значительное количество времени и требует специальных навыков. Однако такой процесс максимально гибкий и позволяет создавать что угодно и как угодно, если работа не ограничена ТЗ. Так как мы рассматриваем создание моделей в рамках GameDev Track-a, то наличие ТЗ обязательно. Итак, для создания 3D-модели “вручную” важно учитывать такие аспекты, как требования модели и стандарты моделирования. Требования модели – это описание параметров, которые определяют, какой должна быть 3D-модель. Стандарты моделирования – это общепринятые правила и методики создания 3D-моделей (обычно свод этих стандартов просто упрощает создание моделей, т.к. определяет базовые правила, например, как правильно реализовать топологию модели или технические стандарты). Эти стандарты распространяются на абсолютно любой проект, требующий 3D-объекты, в чём их и универсальность.
Помимо этих терминов важно учитывать также механизмы, благодаря которым и реализуется модель. Механизмы – это ресурсы, которые непосредственно выполняют работу, включая самого исполнителя. Что конкретно в них входит:
1)	Программы для 3D-моделирования:
•	Любой 3D-редактор (Blender, Maya, 3ds Max и др.)
•	Инструменты для моделирования
•	Инструменты для UV-развёртки
•	Инструменты для текстурирования
•	Оптимизация
2)	Люди, который создают модель:
•	3D-художник
•	Моделлер
•	Текстурщик
•	Технический художник
•	Специалист по оптимизации
Так как создание модели – это сложный и многогранный процесс, то и инструментарий для этой работы нужен большой. Любой хороший 3D-редактор должен предоставлять полный спекрт инструментов для того, чтобы модель была создана корректно. В AAA играх (игра высшего класса) для моделей используются все выше описанные люди для оптимизации работы, так как каждый аспект создания модели требует особый подход. Например, если “схалтурить” на этапе оптимизации модели, то при размещении такого объекта в игровом мире можно “убить” FPS и возможность играть на слабых ПК в эту игру. Огромное количество полигонов заставит процессор обрабатывать только 1 объект, а если таких объектов будет много – играть будет невозможно. У разработчикой инди-проектов нет столько специалистов и зачастую весь объём работы приходится выполнять 1 человеку. Очевидно, что в такой ситуации на 1 модель уходит коллосальное количество времени.
Для чёткого определения того, что в целом необходимо создавать требуется ТЗ и референс. ТЗ (техническое задание) – документ, который определяет требования и порядок создания продукта или выполнения работы. В контексте 3D-моделирования в него обычно включают референсы – справочные материалы, которые используют как образцы или в качестве источника информации. Благодаря этим двум терминам можно получить не только чёткое понимание того, что необходимо создавать, но и единую стилистику моделей, что невероятно улучшит итоговый результат.
Итак, проделав все вышеописанные мероприятия на выходе мы получаем полноценную готовую 3D-модель, которую можно импортировать в игру. Подробное описание создания объекта можно увидеть на диаграммах IDEF0 (рис. 1), её декомпозиции (рис 2).
 
Рисунок 1 - IDEF0

 
Рисунок 2 – Декомпозиция
При детальном анализе всего процесса на основе IDEF-диаграмм не совсем понятно, какую роль играет сам 3D-художник и какие хранилища используются во время создания 3D-модели. Каждая программа должна обладать следующим инструментарием, благодаря которому создание модели в целом возможно:
•	Инструментарий для взаимодействия с любым форматом 3D-объекта, например “.blend”, “.fbx”, “.obj” и т.д.
•	Инструментарием для текстурирования и хранения текстур в различных форматах, например “.png”, “.jpg”, “.exr” и т.д.
•	Рендер-движок для рендера в самые разные форматы
Все взаимосвязи 3D-художника и этапов создания модели, а также влияение нужного инструментария отлично отображены на диаграмме Нотации Гейна-Сарсона (рис. 3).
 
Рисунок 3 - Нотация Гейна-Сарсона (DFD)
Касаясь темы 3D-художника и основываясь на вышеперечисленные диаграммы до конца не понятно, какой итоговый и полный набор действий должен произвести человек, чтобы его руками была создана модель. Конечно, основной алгоритм не такой сложный и может показаться, что на самом деле создание моделей вручную не является какой-то сверхсложной задачей. Однако это далеко не так. Недостаточно просто взять референс, и на его подобии начать моделировать. Каждая модель должна гармонично смотреться в игровом мире, иметь чёткие размеры и свою стилистику. В крупных проектах, где есть люди, которые рисуют для референсов концепт-арты, многих из этих проблем избегают, например, стилистика – это работа концепт-художника. Работая с заранее проработанным референсом 3D-художнику остаётся просто грамотно воссоздать модель и не ошибиться в таких вещах, как пропорции. Но что делать инди-разработчикам, у которых нет никаких навыков в создании концепт-артов? Обычно пробуют использовать реальные объекты с фотографий, на ходу уже додумывая концептуальные вещи, которые вписываются в сеттинг проекта. Так как нашими основными клиентами являются именно инди-разработчики, то рассмотрим детально весь процесс создания модели с их стороны.
Для детального анализа разработки 3D-модели от лица 3D-художника используем EPC-диаграмму (рис. 4), на которой отразим полный набор действий для реализации 3D-модели.

 
Рисунок 4 - Метод цепочки процессов, управляемой событиями (EPC)
	Разберём все ответвления, описанные на диаграмме. Первое решение, которое принимает 3D-художник – устраивает ли его основа модели. В случае, если она не соответствует ожиданиям, то художник дорабатывает её, пока результат не будет удовлетворительным. Следующая дилема случается, когда 3D-художнику требуется определить, насколько детализация модели соответствует ожидаемому результату. Детализация – очень трудный и кропотливый процесс, поэтому если изначально она реализованна плохо, то на её переработку уйдёт большое количество времени. Поэтому к данной оценке подходят ответственно, но в случае, если всё же результат неудовлетворительный – детали следует переработать. Далее следует вопрос, касающийся текстур и материалов. Если в команде есть ответственный за текстуры и материалы, то на данном этапе 3D-художнику достаточно просто наложить их на модель. Однако, если такого человека нет, то художнику предстоит создать всё самостоятельно, что сильно добавляет время разработки модели. Финальным “аккордом” является оценка качества рендера.
	Изучая вопрос создания моделей вручную, важно понимать, что для такого многослойного процесса может быть привлечён не один человек. При наличии специалистов или за неимением выбора можно сегментировать работу, назначив ответственных за свой аспект создания модели. Как говорилось ранее, в крупных проектах над одним объектом могут работать около 5 специалистов, который отвечает за каждый этап. Однако, так как мы рассматриваем инди-разработчиков, то, скорее всего, художник один. Рассмотрим кто контролирует всю работу и вносит правки на основе матрицы распределения ответственности (табл. 1.2).

Таблица 1.2 Матрица распределения ответственности
Этап процесса	3D-художник (R)	Арт-директор/Тимлид
(A)	Тестировщик
(C)	Гейм-дизайнер/lvl-дизайнер (I)
Создание концепта	C	A	I	R
Моделирование	R	A	C	I
Детализация	R	A	C	I
UV-развёртка	R	A	C	I
Текстурирование	R	A	C	I
Рендеринг	R	A	C	I
Экспорт модели	R	A	C	I
Финальное утверждение	C	A	I	R

Итак, подводя итог, можно сделать следующий вывод – создание 3D-моделей “вручную” с использованием специальных программ это сложный и многогранный процесс, требующий, как огромного количества знаний и умений, так и, иногда, сегмантацию на ответственных специалистов. Безусловно, для AAA-проектов намного лучше создавать всё вручную, ведь только так можно добиться максимальной гибкости в реализации идей, однако при наличии финансовых ограничений данный способ не рентабелен.
1.2.2	Моделирование объектов “КАК ДОЛЖНО БЫТЬ” 
Моделирование объектов “КАК ДОЛЖНО БЫТЬ” представляет собой несколько действий, которые должен совершить пользователь, они не требуют большого количества времени и специальных навыков. В отличии от ручного создания, к сожалению, гибкость работы с ИИ ограничивается промптом, однако плюсов всё равно гораздо больше у нейронных сетей, чем у традиционных методов. Промпт – это инструкция или запрос, на основе которого ИИ должен выполнить задачу. Таким образом ТЗ для ИИ можно назвать промптом. Требования модели и стандарты моделирования в области ИИ определяются на этапе написания самой модели нейронной сети. Требования модели – набор гиперпараметров (это настройки или конфигурационные значения, которые задаются перед началом обучения модели искусственного интеллекта и не меняются в процессе её обучения. Они определяют структуру и процесс обучения модели.), на основе которых создается модель, а стандарты моделирования определяются наборами данных, на которых модель обучалась. Механизмами в случае с ИИ является сама нейронная сеть, в отличии от ручного метода, где механизмов большое количество.
3D-моделирование, как говорилось в прошлом разделе, это сложный и многогранный процесс, требующий специальных навыков и большого количества времени, ведь человек вручную воплощает в жизнь модели. Так как ИИ автоматизирует процесс, то затраты времени сокращаются в несколько раз, что позволяет повысить продуктивность до невероятных показателей. В ситуации с ручным созданием пользователь должен проделать большое количество различных действий, чтобы получить конечный результат, в случае же с нейронной сетью – ему нужно сделать пару кликов и составить промпт. Подробное описание создания объекта можно увидеть на диаграммах IDEF0 (рис. 5), её декомпозиции (рис 6).

 
Рисунок 5 - IDEF0
 
Рисунок 6 - Декомпозиция
Разберём все уровни диаграммы поочерёдно:
1)	Обработка естественного языка (NLP)
Этот уровень включает в себя семантический анализ текста, который подается модели на вход, извлечение ключевых атрибутов, таких как цвет, форма, материал и т.д. Сюда же входит разбор контекстных несоответствий и их разрешение.
2)	Концептуальное представление
На этом уровне текстовое описание преобразовывается в структурированное промежуточное представление, то есть генерация базовой формы объекта. Оно будет генерироваться на основе соответствующего набора данных - базы знаний с типичными объектами и их свойствами. Этот этап также можно назвать анализ текстового промта.
3)	Геометрический синтез/назначение материалов и текстур
Здесь происходит детализация и уточнение геометрии самого объекта на основе результата из прошлых двух уровней, здесь же применяются параметры для создания и оптимизации базовых форм и топологии, а также добавляются текстуры, материалы и необходимые детали.
4)	Валидация, обратная связь и финализация
На этом уровне сравнивается сгенерированная модель и исходное описание. Если таковые обнаруживаются, то модель должна автоматически устранить несоответствие или предоставить пользователю способ уточнить результат. В случае успеха у пользователя на руках будет готовый 3D объект, который сходу можно использовать в любом проекте.
Для детального анализа разработки 3D-модели от лица пользователя сервиса для генерации используем EPC-диаграмму (рис. 7), на которой отразим полный набор действий для реализации 3D-модели.
	 

Рисунок 7 - Метод цепочки процессов, управляемой событиями (EPC)
	Как мы можем на диаграмме видеть, в отличии от метода создания 3D модели вручную (см. рис. 4), генерация модели гораздо более прямолинейна и практически не требует никакого вмешательства со стороны пользователя. Генеративная модель откроет пользователю возможность снизить трудо- и времязатраты, даст возможность быстро создавать типовые модели. Все эти возможности будут открыты не только для технически подкованных пользователей, а для любого желающего вне зависимости от возраста, что обеспечивает доступность и простоту в освоении модели.
	Для обеспечения гибкости, максимальной совместимости и удобства использования модель должна поддерживать универсальные форматы 3D моделей, доступные пользователю для скачивания сразу по завершению генерации (OBJ, STL, FBX, PLY), а также возможность параметрических манипуляций для дальнейшего редактирования уже готового результата.
	При разработке системы крайне важно учитывать и необходимый ряд ограничений. В этот перечень должны входить этнические вопросы, вопросы авторских прав на создание модели и вопросы, связанные с опасными или запрещенными объектами.
	Помимо ряда ограничений, важно обозначить нынешние проблемы систем генераций:
1)	Плохое понимание контекста и языковых конструкций
2)	Плохое обрабатывание или полное пренебрежение мелкими деталями
3)	Генерация почти целиком зависит от набора данных, на котором система обучена, так что с нестандартными объектами она может справляться плохо
4)	Необходимость в мощных вычислительных ресурсах 
Описанная система “КАК ДОЛЖНО БЫТЬ” предлагает следующие улучшения:
•	Глубокое понимание смысла и контекста
•	Возможность контроля результата на всех этапах генерации
•	Возможность дальнейшего редактирования полученного результата даже после завершения всех этапов
•	Создание физически правильных объектов
•	Обработка результата в несколько этапов с автоматической проверкой на сходство
	Подводя итог всему вышесказанному, генерация 3D объектов на основе текстовых описаний - это крайне амбициозный инструмент с невероятно широким кругом применения. Этим инструментом смогут пользоваться не только разработчики игр для создания виртуального окружения для своих проектов, но и архитекторы для создания дизайна интерьеров и зданий, видеомонтажеры для создания фильмов, или даже большие коммерческие компании для создания прототипа своих продуктов для дальнейшей продажи. Помимо этого, таким мощным инструментом можно будет пользоваться в образовательных целях.
Таблица 1.3 Шкала и критерии оценки БП и степени проблемности
Оценка процесса	Критерии оценки 	Значение степени проблемности 
Отлично 	Потребители, аудиторы и владельцы считают, что выход процесса в значительной степени лишен недостатков. Нет также и операционных недостатков. Достигнуто серьезное улучшение в работе бизнес-процесса. Ожидается и планируется положительные изменения в будущем.	1
Хорошо	Было достигнуто хорошее улучшение показателей процесса по сравнению с планом. Ожидаются и планируются положительные изменения в будущем.	2
Удовлетворительно	Используемые в бизнес-процессе на данный момент процедуры является эффективными, нет серьезных проблем. Проводятся мероприятия по управлению процессом. Были разработаны ключевые показатели процесса.	3
Не очень хорошо	Бизнес-процесс обладает некоторыми операционными недостатками, которые требуют принятия мер для исправления. Недостатки можно исправить. Проводятся основные мероприятия по управлению процессом.	4
Плохо 	Процесс неэффективен или почти не действует. Существуют серьезные недостатки, требующие принятия мер для исправления. Основные мероприятия по управлению процессом не проводятся.	5

1.3	Анализ рынка программного обеспечения для генерации трёхмерных объектов
Structo ориентируется на быстрорастущий сегмент генеративного ИИ для создания 3D-контента, с особым фокусом на российский рынок и перспективой международной экспансии. Глобальный рынок - рынок генерации 3D-моделей с помощью ИИ: $1.8 млрд в 2023 году с прогнозируемым ростом до $14.5 млрд к 2028 году (CAGR 51.7%); Рынок 3D-моделирования в целом - $28.3 млрд в 2023 году с прогнозом роста до $62.7 млрд к 2027 году (CAGR 22.1%). Так как Structo нацелен на покорение российского рынка, то рассмотрим его: текущий объём - 12.4 млрд рублей (2023 год); прогнозируемый рост - до 47.8 млрд рублей к 2028 году (CAGR 31.2 %).
Для того, чтобы обеспечить успех продукта, а также предложить пользователям уникальный опыт и функционал, необходимо изучить всех конкурентов. Как говорилось ранее, Structo нацелен на российский рынок, но для того, чтобы предоставить наилучший опыт пользователю, необходимо рассмотреть и зарубежные аналоги.
Рассмотрим сильные и слабые стороны зарубежных аналогов:
1)	ShapeDiver (США)
•	Сильные стороны - продвинутая технология, $28М инвестиций, развитый API
•	Слабые стороны - высокая стоимость ($99 - 499/мес), отсутствие локализации, сложность для новичков
2)	Meshy.ai (Канада)
•	Сильные стороны - качество генерации, бесплатный стартовый план
•	Слабые стороны - ограничения для пользователей из РФ, нестабильная работа API, отсутствие понимания русскоязычных запросов
3)	Spline AI (Великобритания)
•	Сильные стороны - интуитивный интерфейс, интеграции с популярными редакторами
•	Слабые стороны - ограниченная работа в РФ, проблемы с серверами из-за санкций, медленная генерация сложных моделей
Как мы видим, все представленные сервисы имеют как свои плюсы, так и минусы. Для того, чтобы создать уникальный, а главное удобный продукт, необходимо взять лучшее от конкурентов, и, по возможности, сделать ещё лучше.
Рассмотрим потенциальных отечественных конкурентов:
1)	Kadinsky 3D (Сбер)
•	Сильные стороны – быстрая генерация 3D-моделей по тексту/изображению (менее минуты), экспорт для 3D-печати и профессиональных редакторов, доступность через API и веб-интерфейс.
•	Слабые стороны – ограниченный контроль параметров генерации, недостаточная детализация сложных объектов, невысокая точность для промышленного применения.
2)	C3D Toolkit (АСКОН)
•	Сильные стороны – высокая точность для промышленного применения; полная интеграция с российским САПР, не требует подключения к интернету.
•	Слабые стороны – не является чистым ИИ-решением, высокий порог входа для новичков, длительное время создания моделей
3)	Нейробокс
•	Сильные стороны – специализация на виртуальных средах, русскоязычный интерфейс, доступность для неспециалистов
•	Слабые стороны – низкая узнаваемость на рынке, ограниченные возможности инженерного моделирования, недостаточная поддержка производственных форматов.
Отсутствие уже запущенных российских сервисов по генерации 3D-моделей даёт весомое преимущество Structo стать первым отечественным сервисом подобного характера. Рассмотрим подробно конкурентные преимущества нашего сервиса:
1)	Технологические
•	Специализированная обработка русскоязычных запросов: на 43% точнее зарубежных аналогов при работе с русскими техническими терминами
•	Оптимизация под российские стандарты: поддержка ГОСТ, СНиП и других отраслевых требований
•	Локальная инфраструктура: серверы на территории РФ, гарантирующие высокую скорость доступа и соответствие регуляторным требованиям
2)	Коммерческие
•	Адаптированная ценовая политика для российского рынка (в 2.5 - 3 раза доступнее зарубежных аналогов)
•	Мультивалютная оплата с приоритетом российских платёжных систем
•	Специализированные отраслевые решения для ключевых сегментов российского рынка
3)	Юридические
•	Полное соответствие требованиям ФЗ-152 “О персональных данных”
•	Регистрация в реестре отечественного ПО
•	Собственные патенты на ключевые алгоритмы
1.4	Анализ стейкхолдеров и их требований к разрабатываемой системе
Одна из самых важных составляющих любого сервиса - пользователи и те, кто имеют какое-либо отношение к проекту. У различных систем, сервисов и приложений разная аудитория, в зависимости от того, что выполняет непосредственно сама система, сервис или приложение. Чем шире целевая аудитория - тем популярней и универсальней продукт, поэтому очень важно проанализировать всех стейкхолдеров для понимания потенциального успеха проекта. Рассмотрим всех стейкхолдеров, их потребности и стратегии взаимодействия с ними для достижения успеха.
1.4.1	Внутренние стейкхолдеры
1)	Команда разработчиков
•	Все члены команды Pyan Projects (Альшов В.Р., Пугачёв Н.Я., Тарасенко М.И., Шишков М.А.)
•	Интересы: успешная работа сервиса, создание прибыльного стартапа, сдача ВКР как стартап
•	Влияние: высокое (принимают ключевые решения по разработке и развитию продукта)
•	Ожидания: техническая реализация проекта, успешная защита диплома
2)	Инвесторы в финансовые партнёры
•	Потенциальные источники финансирования для развития стартапа
•	Интересы: рентабельность инвестиций, коммерческий успех проекта
•	Влияние: высокое (финансовая поддержка проекта)
•	Ожидания: финансовая отдача, рыночный успех, рост стоимости компании
3)	Университет (ЧОУ ВО “Московский университет имени С. Ю. Витте”)
•	Образовательное учреждение, в рамках которого разрабатывается ВКР как стартап
•	Интересы: успешная защита ВКР студентами, повышение репутации вуза
•	Влияние: среднее (оценка проекта как ВКР)
•	Ожидания: соответствие академическим стандартам, инновационность решения.
1.4.2	Внешние стейкхолдеры
1)	Разработчики игр и ПО
•	Интересы: быстрое создание 3D-моделей, экономия времени и ресурсов
•	Влияние: высокое (основная ЦА)
•	Ожидания: качественные 3D-модели, удобный интерфейс, экономия времени
2)	Дизайнеры и художники
•	Интересы: инструмент для быстрой визуализации идей, прототипирование
•	Влияние: высокое (основная ЦА)
•	Ожидания: креативные возможности, качество результата, удобство использования
3)	Архитекторы и инженеры
•	Интересы: быстрое создание концептуальных моделей, визуализация проектов
•	Влияние: среднее (дополнительная ЦА)
•	Ожидания: точность и детализация моделей, соответствие описанию
4)	Владельцы интернет-магазинов и e-commerce
•	Интересы: создание 3D-моделей продуктов для виртуальных витрин
•	Влияние: среднее (потенциальная ЦА)
•	Ожидания: реалистичность моделей, простота использования
5)	Создатели контента
•	Интересы: быстрое создание 3D-объектов для видео, анимации
•	Влияние: среднее (дополнительная ЦА)
•	Ожидания: креативность выходных моделей, экспорт в различные форматы
6)	Конкуренты
•	Существующие сервисы text-to-3D или традиционные инструменты 3D-моделирования
•	Интересы: сохранение своей доли рынка
•	Влияние: среднее (могут повлиять на рыночную позицию)
•	Ожидание: отслеживание инноваций, готовность реагировать на новые решения
7)	Хостинг-провайдеры и облачные сервисы
•	Поставщики инфраструктуры для размещения сервиса
•	Интересы: долгосрочное сотрудничество, оплата услуг
•	Влияние: среднее (технические возможности размещения)
•	Ожидания: соблюдение требований к ресурсам, отсутствие нарушений политик использования
1.4.3	Регуляторы и общество
1)	Регуляторные органы
•	Органы контроля в сфере IT, защиты данных, авторских прав
•	Интересы: соблюдение законодательства, безопасность данных
•	Влияние: высокое (могут ограничить или запретить деятельность)
•	Ожидания: соответствие нормативным требованиям
2)	Сообщество разработчиков 3D в ИИ
•	Профессиональное сообщество в области 3D моделирования и ИИ
•	Интересы: новые технологии, влияющие на индустрию
•	Влияние: среднее (формирование мнения, потенциальные пользователи и критики)
•	Ожидания: инновационность решения, открытость, для участия сообщества
1.4.4	Ключевые потребности стейкхолдеров
•	Качество выходных 3D-моделей - главный приоритет для пользователей
•	Скорость генерации - сокращение времени с 20-90 часов до 10-30 минут
•	Удобство использования - интуитивный интерфейс, с которым по силам разобраться даже самым неопытным пользователям
•	Техническая поддержка - важно для пользователей и партнёров
•	Экономическая эффективность - важно для инвесторов и клиентов
•	Соответствие нормативным требованиям - важно для регуляторов
1.4.5	Стратегии взаимодействия со стейкхолдерами
1)	Ключевые пользователи
•	Раннее тестирование
•	Программа обратной связи
•	Специальные предложения для первых пользователей
2)	Инвесторы и партнёры
•	Демонстрация прототипа и MVP
•	Прозрачная бизнес-модель
•	Регулярная отчётность о развитии проекта
3)	Университет
•	Соответствие академическим требованиям
•	Инновационность и научный вклад
•	Возможность применения в образовательных целях
4)	Регуляторы
•	Проактивное соответствие требованиям
•	Прозрачная политика конфиденциальности
•	Соблюдение авторских прав
5)	Технологическое сообщество
•	Участие в конференциях и мероприятиях
•	Публикация технических статей
•	Возможность для разработчиков создавать расширения
1.5	Выбор средств разработки
Для того, чтобы успешно реализовать проект без испытывания различных технических проблем, необходимо грамотно выбрать средства разработки. Они в себя включают: языки программирования, СУБД, различные фреймворки, а также среды разработки. Выбор варьируется от поставленной задачи, в случае со “Structo” были выбраны следующий инструментарий:
1)	Языки программирования
•	Python:
	Python является оптимальным выбором для проекта по генерации 3D-моделей благодаря его широким возможностям в области машинного обучения и компьютерного зрения.
	Python предоставляет доступ к библиотеке PyTorch, которая необходима для работы с моделью Shape-E.
	Синтаксис Python прост и интуитивен, что позволяет быстро разрабатывать и тестировать новую функциональность.
	Обширная экосистема библиотек для работы с 3D-данными и визуализацией делает Python идеальным выбором для серверной части проекта.
	Python поддерживает асинхронное программирование, что важно для обработки параллельных запросов на генерацию моделей.
•	JavaScript:
	JavaScript используется для клиентской части приложения, обеспечивая интерактивность пользовательского интерфейса.
	JavaScript позволяет интегрировать библиотеку Three.js для визуализации 3D-моделей непосредственно в браузере пользователя.
	Асинхронные запросы (AJAX) реализованы на JavaScript для общения с серверной частью без перезагрузки страницы.
	Возможность динамического обновления UI элементов для отображения прогресса генерации делает JavaScript незаменимым для фронтенд-части.
2)	СУБД
•	SQLite
	SQLite выбран как легковесная, но надёжная система управления базами данных
	Не требует развёртывания отдельного сервера баз данных, что упрощает архитектуру и установку системы.
	Хранит данные в одном файле, что облегачает резервное копирование и перенос данных.
3)	Фреймворки
•	Flask
	Flask является мирофреймворком, который идеально подходит для проектов средней сложности, как раз таких как “Structo”.
	Легковесность и минимализм Flask позволяют создать оптимизированный бэкенд без избытычных компонентов.
	Модульная архитектура с возможностью подключать только необходимые расширения (SQLAlchemy, CORS и т.д.)
	Простая маршрутизация и обработка HTTP-запросов делают код более читаемым и поддерживаемым
	Встроенная поддержка шаблонов Jinja2 упрощает создание динамических веб-страниц.
	Flsk хорошо масштабируется и может быть развёрнут как на VDS, так и на локальном компьютере.
•	Shape-e
	Специализированный фреймворк для генерации 3D-моделей на основе текстовых описаний
	Реализует современные методы нейронных сетей для создания трёхмерных объектов.
	Поддерживает работу с CUDA для ускорения вычислений на GPU.
	Интегрируется с PyTorch, что обеспечивает высокую производительность и точность генерации.
•	Three.js
	JavaScript библиотека для отображения 3D-графики в браузере с использованием WebGL.
	Предоставляет высокоуровневый API для работы с 3D-объектами, освещением, материалами и камерами.
	Обеспечивает кроссбраузерную совместимость и оптимизированную производительность.
	Богатая экосистема плагинов и расширений для дополнительной функциональности.
4)	Среда разработки
•	Распределённая архитектура
	Выбор распределённой архитектуры обусловлен требованиями к вычислительным ресурсам для генерации 3D-моделей.
	Разделение проекта на веб-сервер на VDS и генератор моделей на локальном ПК с GPU позволяет эффективно использовать ресурсы.
	Прокси-сервер обеспечивает безопасную коммуникацию между компонентами системы.
•	Nginx
	Выбран в качестве веб-сервера и обратного прокси для Flask-приложения.
	Обеспечивает высокую производительность при обработке статических файлов.
	Реализует SSL/TLS шифрование для безопасного соединения.
	Обеспечивает кэширование для улучшения производительности.
•	Systemd
	Используется для управления работой сервисов как на VDS, так и на локальном компьютере.
	Обеспечивает автоматический запуск при включении системы.
	Предоставляет механизмы перезапуска сервисов при сбоях.
	Поддерживает логирование и мониторинг работы сервисов.
1.6	Техническое задание на разработку корпоративной информационной системы
Техническое задание на разрабатываемое ПО представлено в Приложении 1.
1.7	Выводы по разделу
В данной главе, рассмотрели создание 3D-моделей “КАК ЕСТЬ” с использованием традиционных методов и “КАК ДОЛЖНО БЫТЬ” с использованием нашего сервиса на примере “GameDev” Track-а МУИВа, актуальность, проанализировали стейкхолдеров и рынок 3D-моделирования. Изучив вышеописанное пришли к выводу, что нынешний рынок 3D-моделирования требует автоматизации средствами нейронных сетей, что делает наш проект актуальным, а отсутствие готовых аналогов на территории РФ возводит актуальность в абсолют. Проанализировав конкурентов выявили для себя важные детали, на которые нужно обратить внимание при разработке для того, чтобы сделать сервис максимально удобным и по-настоящему уникальным.
 
ПРОЕКТНАЯ ЧАСТЬ
2	ПРОЕКТИРОВАНИЕ И РАЗРАБОТКА ПРОЕКТА
2.1	Общая информация по технической части
Реализация системы, которая способна генерировать трёхмерные объекты методами ИИ – задача сложная, требующая передовых технологий и огромного количества ресурсов. С момента начала разработки проекта была проведена большая исследовательская работа на тему применения нейронных сетей для реализации подобный систем, как “Structo”, что породило большое количество архитектур, каждая из которых по-своему уникальна. В поисках самой оптимальной было создано 3 тестовые архитектуры – модель, в основе которой лежат генеративно-состязательная нейросеть (GAN), модель, совмещающая в себе как GAN, так и вариационный автоэнкодеры (VAE) и диффузионная модель, которая является самой актуальной для решения задачи с генерацией объектов. В общем, каждая архитектура совмещала в себе несколько сегментов – модели для обработки и векторизации текстовых промптов и модели для создания объектов на основе эмбеддингов.
Так как “Structo” – это веб-сервис, была проделана большая работа по созданию веб-сегмента проекта – от серверной части, до клиентской. Сайт содержит в себе несколько страниц: главная страница с информацией о проекте и контактными данными, страница генерации, в которой пользователь вводит промпт и получает результат, страница с гайдами по вводу промптов, личный кабинет и страница с тарифами. Каждая страница имеет перевод на английский язык, что даёт возможность использовать сервис зарубежом.
В данной главе описана проделанная лично мной работа над “Structo” – каждая глава описывает аспекты, в реализации которых было принято моё непосредтвенное участие. Основная масса задач – работа над реализацией архитектур. Информация о реализации моделей для генрации 3D-моделей находится в отчёте Альшова В.Р. и Тарасенко М.И., информация о тестировании архитектур и актуальных систем – Шишков М.А.
2.2	Анализ требований к веб-приложению
Перед началом проектирования веб-приложения был проведен комплексный анализ требований, которые можно разделить на следующие категории:
2.2.1	Функциональные требования
•	Возможность генерации 3D-моделей на основе текстовых описаний
•	Предпросмотр сгенерированных моделей в браузере с возможностью манипуляции (вращение, масштабирование)
•	Экспорт моделей в obj-формате
•	Многоязычный интерфейс (русский, английский) (приложение 27, 33)
•	Система тарифных планов с различным уровнем доступа
2.2.2	Нефункциональные требования
•	Отзывчивый интерфейс в времени загрузки до 2 сукунд
•	Совместимость с современными браузерами 
•	Доступность сервиса 24/7 с временем бесперебойной работы не менее 99.5%
•	Защита персональных данных ползователей
•	Безопасное хранение пользовательских моделей
•	Адаптивный дизайн для мобильных устройств и планшетов
2.3	Архитектура веб-приложения
2.3.1	Общая схема архитектуры
Веб-приложение “Structo” построено на основе монолитной архитектуры с разделением на функциональные компоненты. Общая схема архитектуры представлена следующими компонентами:
•	Frontend-сервис – клиентское приложение, разработанное с использованием HTML, CSS и JavaScript с библиотекой Three.js для 3D-визуализации
•	Backend API – RESTful API на основе Flask, обрабатывающий запросы клиента
•	Сервис генерации моделей – модуль, интегрированный с нейронными сетями для создания 3D-моделей
•	Сервис аутентификации – отвечает за регистрацию, авторизацию и управлениями сессиями пользователя
•	База данных – SQLite для хранения данных пользователей, моделей и настроек
•	Файловое хранилище – организованная система для хранения сгенерированных 3D-моделей
•	Nginx – веб-сервер и прокси для маршрутизации запросов и обработки HTTPS (приложение 19)
Взаимодействие между компонентами осуществляется посредством RESTful API, что позволяет эффективно обрабатывать запросы и обеспечивать асинхронную генерацию моделей.
2.3.2	Схема развертывания на VDS
Развертывание приложения на VDS под управлением Ubuntu 22.04 реализовано с использованием следующих инструментов и технологий:
1.	Базовая настройка сервера
•	Установка и обновление пакетов Ubuntu
•	Настройка файрвола (UFW) для защиты сервера
•	Настройка SSH с использованием ключевой аутентификации
2. Настройка веб-окружения
•	Установка Python 3.10 и создание вирутального окружения
•	Установка Nginx и настройка его в качестве обратного прокси
•	Настройка SSL-сертификатов с помощью Let’s Encrypt для обеспечения HTTPS
•	Настройка доступа к статическим файлам через Nginx для оптимизации производительности
3. Запуск приложения
•	Установка менеджера процессов Gunicorn для запуска Flask-приложения
•	Настройка автоматического запуска через system
•	Настройка логирования и мониторинга работы приложения
Данная схема развертывания обеспечивает стабильную работу веб-приложения, его доступность и безопасность.
2.4	Разработка backend-части
2.4.1	Выбор технологического стека 
Для разработки серверной части веб-приложения был выбран следующий технологический стек:
•	Python 3.10 – основной язык программирования
•	Flask – легковесный веб-фреймворк для создания REST API
•	SQLAlchemy – ORM для работы с базой данных
•	SQLite – легковесная реляционная СУБД для хранения данных
•	Werkzeug – утилиты для обеспечения безопасности, включая хеширование паролей
•	Flask-CORS – расширение для поддержки кросс-доменных запросов
•	SMTP-клиент – для отправки электронных писем при регистрации
Данный стек технологий был выбран из-за его простоты, надежности и хорошей документации (приложение 46), что позволяет быстро разрабатывать и поддерживать веб-приложение.
2.4.2	Архитектура API
RESTful API веб-приложения структурировано следующим образом:
	1. Основные страницы
•	/ - главная страница (приложение 5)
•	/prompt_guide – страница с руководством по составлению промптов (приложение 6)
•	/generate – страница для генерации моделей (приложение 7)
2. Авторизация и управление пользователями
•	/auth_status – проверка статуса авторизации пользователя (приложение 8)
•	/auth – обработка запросов регистрации и авторизации (приложение 9)
•	/logout – выход из системы (приложение 10)
•	/check_confirmation – проверка статуса подтверждения аккаунта
•	/verify_code – проверка кода подтверждения при регистрации (приложение 23, 29, 31)
•	/reset_password – сброс пароля пользователя (приложение 38)
3.  Взаимодействие с генератором моделей
•	/check_generator_status – проверка доступности сервиса генерации (приложение 11)
•	/generate_model – запрос на генерацию новой модели (приложение 12)
•	/models/<filename> - доступ к сгенерированной модели (приложение 13)
•	/download_model/<filename> - скачивание сгенерированной модели
•	/generation_progress – проверка статуса генерации модели
4.	Личный кабинет пользователя
•	/account – страница личного кабинета (приложение 21)
•	/user_profile – получение данных профиля пользователя (приложение 34)
•	/user_models – получение списка моделей пользователя
•	/change_password – изменения пароля пользователя (приложение 25)
•	/update-profile – обновление профиля пользователя (приложение 35)
5.	Управление подписками
•	/subscriptions – страница с информацией о подписках (приложение 36)
•	/pay – страница оплаты подписки (приложение 37)
•	/api/subscription – API для работы с подписками пользователя
Для каждого эндпоинта API определены соответствующие методы HTTP (GET,POST), схемы данных для запросов и ответом, а также политики доступа в зависимости от статуса авторизации пользователя.
2.4.3	Модели данных
Для хранения информации в базе данных SQLite разработаны следующие модели:
1. User (приложение 14)
•	id: INTEGER primary key
•	username: VARCHAR (150), unique
•	password: VARCHAR (150) – хешированный пароль
•	email: VARCHAR (150), unique
•	confirmed: INTEGER – статус подтверждения аккаунта
•	confirmation_code: INTEGER – код подтверждения для активации 
•	display_name: VARCHAR (150) – отображаемое имя пользователя
•	subscription: INTEGER – тип подписки пользователяэ
2. DownloadedFile (приложение 15)
•	id: INTEGER primary key
•	user_id: INTEGER, FOREIGN KEY(User) – связь с пользователем
•	filename: VARCHAR (150) – название файла модели
•	prompt: VARCHAR (500) – текстовый промпт, на основе которого была создана модель
•	download_time: DATETIME – время скачивания/создания модели
База данных инициализируется автоматически при первом запуске приложения с созданием необходимых таблиц (приложение 40). Выбор SQLite обусловлен простотой настройки и использования, низкими требованиями к ресурсам сервера, что идеально подходит для текущей стадии развития проекта (приложение 32).
2.4.4	Интеграция с сервисом генерации моделей
Взаимодействие между веб-приложением и сервисом генерации 3D-моделей реализовано через HTTP-запросы к отдельному API генератора. Процесс интеграции включает следующие шаги:
1. Проверка доступности генератора
•	Переодическая проверка статуса генератора через API (приложение 18)
•	Отображение статуса на интерфейсе пользователя (приложение 18)
2. Отправка запроса на генерацию
•	Формирование запроса с текстовым промптом и параметрами
•	Передача запроса на сервис генерации через API
•	Получение идентификатора задачи на генерацию
3. Мониторинг процесса генерации (приложение 29)
•	Переодические запросы для проверки статуса генерации  (приложение 41)
•	Отображение прогресса генерации пользователю
4. Обработки результатов (приложение 30)
•	Получение ссылки на сгенерированную модель
•	Сохранение модели в локальном хранилище
•	Предоставление доступа к модели через веб-интерфейс
5. Обработка ошибок (приложение 42)
•	Обработка ситуаций недоступности генератора 
•	Уведомление пользователя о проблемах с генерацией
Данный подход позволяет разделить работу веб-сервера и ресурсоемкого процесса генерации моделей, обеспечивая масштабируемость и стабильность системы.
2.5	Разработка frontend-части
2.5.1	Выбор технологического стека
Для разработки клиентской части веб-приложения был выбран следующий технологический стек:
•	HTML – структура веб-страниц
•	CSS – стилизация и адаптивный дизайн
•	JavaScript – клиентская логика и взаимодействие с API
•	Three.js – библиотека для работы с 3D-графикой в браузере
•	Fetch API – выполнение AJAX-запросов к сервера
Данный стек обеспечивает создание современного, производительного и удобного пользовательского интерфейса с поддержкой интерактивной 3D-визуализации моделей.
2.5.2	Структура генерации
Веб-приложение “Structo” включает следующие основные страницы и компоненты:
1. Главная страница 
•	Информация о проекте и его возможностях
•	Демонстрация примеров сгенерированных моделей
•	Кнопки для регистрации и начала работы
2. Страница генерации (приложение 24, 45)
•	Форма ввода текстового промпта
•	Индикатор доступности генератора
•	Прогресс-бар процесса генерации (приложение 43)
•	3D-вьюер с возможностью вращения, масштабирования и изучения модели
•	Кнопка для скачивания модели
3. Личный кабинет
•	Профиль пользователя с возможностью редактирования данных
•	История сгенерированных моделей
4. Страница с гайдами (приложение 24)
•	Руководства по составлению эффективных текстовых промптов
•	Советы по оптимизации результатов
5. Страница авторизации (приложение 26)
•	Формы входа и регистрации
•	Система подтверждение аккаунта по электронной почте
•	Механизм восстановление пароля
Интерфейс разработан с учетом принципов Material Design и адаптирован для различных устройств, от мобильных телефонов до десктопных компьютеров.
2.5.3	Визуализация 3D-моделей
Ключевой особенностью веб-приложения является интерактивный 3D-вьюер, реализованный с использованием Three.js. Вьюер обеспечивает следующие возможности:
•	Отображение сгенерированных 3D-моделей в браузере без необходимости установки дополнительного ПО (приложение 16)
•	Вращение, масштабирование и панормаминирование модели для детального изучения (приложение 16)
•	Экспорт модели в obj-формате для дальнейшего использования (приложение 17)
2.5.4	Обеспечение безопасности на клиентской стороне
Для обеспечения безопасности на клиентской стороне реализованы следующие механизмы:
1. Защита сессий пользователей
•	Использование HttpOnly cookies для хранения сессий
•	Защита от CSRF-атак с использованием токенов
2. Валидация данных
•	Предварительная валидация форм на клиентской стороне
•	Двойная проверка данных на сервере
3. Безопасность соединения
•	Принудительное использование HTTPS
•	Настройка заголовков безопасности
2.6	Развертывание веб-приложения
2.6.1	Настройка VDS сервера
Развертывание веб-приложения “Structo” на VDS сервере с Ubuntu 22.04 включало следующие этапы:
1. Базовая настройка сервера
•	Обновление системы: apt update && apt upgrade -y
•	Настройка файрвола: ufw allow OpenSSH, ufw allow ‘ufw allow Nginx Full’, ufw enable
•	Настройка временной зоны: timedatectl set-timezone Europe/Moscow
•	Установка необходимых пакетов apt install python3-pip python3-venv nginx
2. Настройка веб-сервера Nginx (приложение 20)
•	Создание конфигурационного файла для сайта в /etc/nginx/sites-available
•	Настройка проксирования запросов на Gunicorn
•	Настройка обработки статических файлов
•	Настройка HTTPS через Let’s Encrypt с автоматическим обновлением сертификатов
3. Установка и настройка приложения
•	Клонирование репозитория с кодом проекта
•	Создание виртуального окружения Python
•	Установка зависимостей из requirements.txt
•	Настройка конфигурационных файлов приложения
•	Создание директорий для хранения моделей и временных файлов
•	Настройка прав доступа к файлам и директориям
4. Настройка Gunicorn (приложение 22)
•	Установка Gunicorn: pip install gunicorn
•	Создание system-сервиса для автоматического запуска (приложение 44)
•	Настройка логирования
•	Настройка параметров производительности
2.6.2	Обеспечение безопасности сервера
Для обеспечения безопасности веб-приложения “Structo” были реализованы следующие меры:
1. Защита от распространенных атак
•	Защита от DDoS с использованием rate limiting
•	Валидация всех пользовательских данных
2. Защита данных пользователей
•	Хеширование паролей с использованием алгоритма PBKDF2-SHA256
•	Безопасное хранение email-адресов
•	Подтверждение регистрации через электронную почту
3. Безопасность сервера
•	Регулярные обновления системы и пакетов
•	Использование файрвола для ограничения доступа
•	Мониторинг логов и оповещение о подозрительной активности (приложение 39)
2.7	Выводы по главе 2
В результате проделанной работы было спроектировано и разработано полноценное веб-приложение “Structo”, предоставляющее пользователям доступ к функционалу генерации 3D-моделей на основе текстовых описаний. Веб-приложение успешно развернуто на VDS под управлением Ubuntu 22.04 и обеспечивает стабильную работу с хорошей отзывчивостью, а также оно успешно интегрирует современные веб-технологии и инновационные методы искусственного интеллекта для генерации 3D-моделей, предоставляя пользователям уникальный и полезный сервис с широкимим возможностями применения в различных областях. 
ЗАКЛЮЧЕНИЕ

В данной выпускной квалификационной работе, были выполнены поставленные задачи по проведению анализа предметной области организации работы электронной библиотеки в образовательном учреждении, были сформированы необходимые функциональные требования к разрабатываемой информационной системе, проведен подробный анализ баз данных и средств разработки, построена модель данных на физическом и логическом уровне, разработана корпоративная электронная библиотека ххх ххххххх ххххххх ххххххх ххххххх ххххх хххххххххх ххххххх ххххххххх хххххх. Ххххх ххххххх хххххх хххххх ххххххх ххххххх ххххх ххх ххххх. Хххх ххххх ххххх хххххххх хххх хххх хх ххххххх хххххххх хх х х ххххххх. Ххх ххх ххххххх ххххххх ххххххх ххххххх ххххх хххххххххх ххххххх ххххххххх ххххххи дана экономическая оценка целесообразности разработки и ее себестоимости.
В результате выполнения задач, была Ххххх ххххххх хххххх хххххх ххххххх ххххххх ххххх ххх ххххх. Хххх ххххх ххххх хххххххх хххх хххх хх ххххххх хххххххх хх х х ххххххх. Ххх ххх ххххххх ххххххх ххххххх ххххххх ххххх хххххххххх ххххххх ххххххххх хххххх. согласно методологии “КАК ЕСТЬ” и ”КАК ДОЛЖНО БЫТЬ”.
Ххххх ххххххх хххххх хххххх ххххххх ххххххх ххххх ххх ххххх. Хххх ххххх ххххх хххххххх хххх хххх хх ххххххх хххххххх хх х х ххххххх. Ххх ххх ххххххх ххххххх ххххххх ххххххх ххххх хххххххххх ххххххх ххххххххх хххххх.
По результатам был сделан расчет затрат на разработку корпоративной электронной библиотеки и сделан анализ экономической эффективности и целесообразности разработки и внедрения данного продукта.
